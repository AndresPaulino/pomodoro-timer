================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-24T21:46:33.389Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
electron/
  main.ts
  preload.js
  tsconfig.json
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    Analytics.tsx
    Settings.tsx
    TaskInput.tsx
    Timer.tsx
  hooks/
    useProductivityData.ts
  App.css
  App.test.js
  App.tsx
  index.css
  index.tsx
  logo.svg
  reportWebVitals.js
  setupTests.js
.gitignore
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.electron.json
tsconfig.json

================================================================
Repository Files
================================================================

================
File: electron/main.ts
================
import { app, BrowserWindow } from 'electron';
import * as path from 'path';
import * as url from 'url';
import * as isDev from 'electron-is-dev';

function createWindow() {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'),
    },
  });

  if (isDev) {
    win.loadURL('http://localhost:3000');
  } else {
    win.loadURL(
      url.format({
        pathname: path.join(__dirname, '../index.html'),
        protocol: 'file:',
        slashes: true,
      })
    );
  }

  if (isDev) {
    win.webContents.openDevTools();
  }
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

================
File: electron/preload.js
================
const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electron', {
  ipcRenderer: {
    send: (channel, data) => ipcRenderer.send(channel, data),
    on: (channel, func) => ipcRenderer.on(channel, (event, ...args) => func(...args)),
  },
});

================
File: electron/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2018",
    "module": "CommonJS",
    "outDir": "../build/electron",
    "rootDir": ".",
    "strict": true,
    "esModuleInterop": true,
    "sourceMap": true
  },
  "include": ["*.ts"]
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/components/Analytics.tsx
================
import React, { useState, useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { ProductivitySession } from '../hooks/useProductivityData';

interface AnalyticsProps {
  sessions: ProductivitySession[];
  dailyStats: { date: string; totalTime: number }[];
  currentStreak: number;
}

type TimeRange = 'daily' | 'weekly' | 'monthly';

const Analytics: React.FC<AnalyticsProps> = ({ sessions, dailyStats, currentStreak }) => {
  const [timeRange, setTimeRange] = useState<TimeRange>('daily');

  const chartData = useMemo(() => {
    const now = new Date();
    const timeRanges = {
      daily: 7,
      weekly: 4,
      monthly: 12,
    };

    const data = new Array(timeRanges[timeRange])
      .fill(0)
      .map((_, index) => {
        const date = new Date(now);
        date.setDate(date.getDate() - index * (timeRange === 'daily' ? 1 : 7));
        const dateStr = date.toISOString().split('T')[0];

        if (timeRange === 'daily') {
          const stat = dailyStats.find((s) => s.date === dateStr);
          return { date: dateStr, totalTime: stat ? Math.round(stat.totalTime / 60) : 0 };
        } else {
          const weekStart = new Date(date);
          weekStart.setDate(weekStart.getDate() - weekStart.getDay());
          const weekEnd = new Date(weekStart);
          weekEnd.setDate(weekEnd.getDate() + 6);

          const totalTime = dailyStats.reduce((sum, stat) => {
            const statDate = new Date(stat.date);
            if (statDate >= weekStart && statDate <= weekEnd) {
              return sum + stat.totalTime;
            }
            return sum;
          }, 0);

          return { date: dateStr, totalTime: Math.round(totalTime / 60) };
        }
      })
      .reverse();

    return data;
  }, [dailyStats, timeRange]);

  return (
    <div className='mt-8'>
      <h2 className='text-2xl font-bold mb-4'>Productivity Analytics</h2>
      <div className='mb-4 p-4 bg-blue-100 rounded-lg'>
        <p className='text-xl font-semibold'>
          Current Streak: {currentStreak} {currentStreak === 1 ? 'day' : 'days'}
        </p>
      </div>
      <div className='mb-4'>
        <select value={timeRange} onChange={(e) => setTimeRange(e.target.value as TimeRange)} className='p-2 border rounded'>
          <option value='daily'>Daily</option>
          <option value='weekly'>Weekly</option>
          <option value='monthly'>Monthly</option>
        </select>
      </div>
      <ResponsiveContainer width='100%' height={300}>
        <LineChart data={chartData}>
          <XAxis dataKey='date' />
          <YAxis label={{ value: 'Total Time (minutes)', angle: -90, position: 'insideLeft' }} />
          <Tooltip />
          <Legend />
          <Line type='monotone' dataKey='totalTime' stroke='#8884d8' />
        </LineChart>
      </ResponsiveContainer>
      <div className='mt-4'>
        <h3 className='text-xl font-semibold mb-2'>Recent Sessions</h3>
        <ul className='space-y-2'>
          {sessions
            .slice(-5)
            .reverse()
            .map((session) => (
              <li key={session.id} className='bg-gray-100 p-2 rounded'>
                <span className='font-medium'>{session.task}</span> -<span className='text-gray-600'> {session.category}</span> -
                <span className='text-gray-600'>{Math.round(session.duration / 60)} minutes</span>
              </li>
            ))}
        </ul>
      </div>
    </div>
  );
};

export default Analytics;

================
File: src/components/Settings.tsx
================
import React, { useState } from 'react';

interface SettingsProps {
  pomodoroTime: number;
  breakTime: number;
  onSave: (newPomodoroTime: number, newBreakTime: number) => void;
}

const Settings: React.FC<SettingsProps> = ({ pomodoroTime, breakTime, onSave }) => {
  const [newPomodoroTime, setNewPomodoroTime] = useState(pomodoroTime);
  const [newBreakTime, setNewBreakTime] = useState(breakTime);

  const handleSave = () => {
    onSave(newPomodoroTime, newBreakTime);
  };

  return (
    <div className='bg-white p-6 rounded-lg shadow-md'>
      <h2 className='text-2xl font-bold mb-4'>Settings</h2>
      <div className='mb-4'>
        <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor='pomodoroTime'>
          Pomodoro Duration (minutes):
        </label>
        <input
          id='pomodoroTime'
          type='number'
          value={newPomodoroTime / 60}
          onChange={(e) => setNewPomodoroTime(Number(e.target.value) * 60)}
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
        />
      </div>
      <div className='mb-4'>
        <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor='breakTime'>
          Break Duration (minutes):
        </label>
        <input
          id='breakTime'
          type='number'
          value={newBreakTime / 60}
          onChange={(e) => setNewBreakTime(Number(e.target.value) * 60)}
          className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
        />
      </div>
      <button
        onClick={handleSave}
        className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline'
      >
        Save Settings
      </button>
    </div>
  );
};

export default Settings;

================
File: src/components/TaskInput.tsx
================
import React, { useState } from 'react';

interface TaskInputProps {
  onTaskStart: (task: string, category: string) => void;
}

const TaskInput: React.FC<TaskInputProps> = ({ onTaskStart }) => {
  const [task, setTask] = useState('');
  const [category, setCategory] = useState('Work');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (task.trim()) {
      onTaskStart(task, category);
      setTask('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className='mb-4'>
      <div className='flex flex-col space-y-2'>
        <input
          type='text'
          value={task}
          onChange={(e) => setTask(e.target.value)}
          placeholder='What are you working on?'
          className='p-2 border rounded'
        />
        <select value={category} onChange={(e) => setCategory(e.target.value)} className='p-2 border rounded'>
          <option value='Work'>Work</option>
          <option value='Study'>Study</option>
          <option value='Personal'>Personal</option>
        </select>
        <button type='submit' className='bg-blue-500 text-white p-2 rounded hover:bg-blue-600'>
          Start Task
        </button>
      </div>
    </form>
  );
};

export default TaskInput;

================
File: src/components/Timer.tsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-toastify';

interface TimerProps {
  pomodoroTime: number;
  breakTime: number;
  onComplete: (duration: number) => void;
}

type TimerState = 'pomodoro' | 'break' | 'idle';

const Timer: React.FC<TimerProps> = ({ pomodoroTime, breakTime, onComplete }) => {
  const [time, setTime] = useState<number>(pomodoroTime);
  const [isActive, setIsActive] = useState<boolean>(false);
  const [elapsedTime, setElapsedTime] = useState<number>(0);
  const [timerState, setTimerState] = useState<TimerState>('idle');

  const resetTimer = useCallback((duration: number) => {
    setTime(duration);
    setElapsedTime(0);
    setIsActive(false);
  }, []);

  const startPomodoro = useCallback(() => {
    resetTimer(pomodoroTime);
    setTimerState('pomodoro');
    setIsActive(true);
  }, [pomodoroTime, resetTimer]);

  const startBreak = useCallback(() => {
    resetTimer(breakTime);
    setTimerState('break');
    setIsActive(true);
  }, [breakTime, resetTimer]);

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    if (isActive && time > 0) {
      interval = setInterval(() => {
        setTime((prevTime) => prevTime - 1);
        setElapsedTime((prevElapsed) => prevElapsed + 1);
      }, 1000);
    } else if (time === 0 && isActive) {
      if (interval) clearInterval(interval);
      if (timerState === 'pomodoro') {
        toast.success('Pomodoro completed! Time for a break.');
        onComplete(elapsedTime);
      } else if (timerState === 'break') {
        toast.info('Break time over. Ready for another Pomodoro?');
      }
      setIsActive(false);
      setTimerState('idle');
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isActive, time, onComplete, elapsedTime, timerState]);

  const toggleTimer = (): void => {
    setIsActive(!isActive);
  };

  const formatTime = (timeInSeconds: number): string => {
    const minutes = Math.floor(timeInSeconds / 60);
    const seconds = timeInSeconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <div className='text-center p-6 bg-gray-100 rounded-lg shadow-md'>
      <h1 className={`text-6xl font-bold mb-4 ${timerState === 'break' ? 'text-green-500' : 'text-gray-800'}`}>
        {formatTime(time)}
      </h1>
      <div className='space-x-4'>
        {timerState === 'idle' && (
          <button className='px-4 py-2 rounded-md text-white font-semibold bg-blue-500 hover:bg-blue-600' onClick={startPomodoro}>
            Start Pomodoro
          </button>
        )}
        {timerState === 'pomodoro' && isActive && (
          <button className='px-4 py-2 rounded-md text-white font-semibold bg-red-500 hover:bg-red-600' onClick={toggleTimer}>
            Pause
          </button>
        )}
        {timerState === 'pomodoro' && !isActive && time !== pomodoroTime && (
          <button className='px-4 py-2 rounded-md text-white font-semibold bg-green-500 hover:bg-green-600' onClick={toggleTimer}>
            Resume
          </button>
        )}
        {timerState === 'idle' && time === 0 && (
          <button className='px-4 py-2 rounded-md text-white font-semibold bg-green-500 hover:bg-green-600' onClick={startBreak}>
            Start Break
          </button>
        )}
        {timerState === 'break' && (
          <button
            className='px-4 py-2 rounded-md text-white font-semibold bg-yellow-500 hover:bg-yellow-600'
            onClick={toggleTimer}
          >
            {isActive ? 'Pause Break' : 'Resume Break'}
          </button>
        )}
      </div>
    </div>
  );
};

export default Timer;

================
File: src/hooks/useProductivityData.ts
================
import { useState, useEffect } from 'react';

export interface ProductivitySession {
  id: string;
  date: string; // ISO string
  duration: number;
  category: string;
  task: string;
}

interface DailyStats {
  date: string; // ISO string (YYYY-MM-DD)
  totalTime: number;
}

export interface ProductivityData {
  sessions: ProductivitySession[];
  dailyStats: DailyStats[];
  currentStreak: number;
  addSession: (session: Omit<ProductivitySession, 'id' | 'date'>) => void;
  removeSession: (id: string) => void;
  updateStreak: () => void;
}

const useProductivityData = (): ProductivityData => {
  const [sessions, setSessions] = useState<ProductivitySession[]>(() => {
    const stored = localStorage.getItem('productivitySessions');
    return stored ? JSON.parse(stored) : [];
  });
  const [dailyStats, setDailyStats] = useState<DailyStats[]>(() => {
    const stored = localStorage.getItem('dailyStats');
    return stored ? JSON.parse(stored) : [];
  });
  const [currentStreak, setCurrentStreak] = useState<number>(() => {
    const stored = localStorage.getItem('currentStreak');
    return stored ? parseInt(stored, 10) : 0;
  });
  const [lastStreakUpdate, setLastStreakUpdate] = useState<string>(() => {
    return localStorage.getItem('lastStreakUpdate') || '';
  });

  useEffect(() => {
    localStorage.setItem('productivitySessions', JSON.stringify(sessions));
    localStorage.setItem('dailyStats', JSON.stringify(dailyStats));
    localStorage.setItem('currentStreak', currentStreak.toString());
    localStorage.setItem('lastStreakUpdate', lastStreakUpdate);
  }, [sessions, dailyStats, currentStreak, lastStreakUpdate]);

  const addSession = (session: Omit<ProductivitySession, 'id' | 'date'>): void => {
    const now = new Date();
    const newSession = {
      ...session,
      id: now.getTime().toString(),
      date: now.toISOString(),
    };
    setSessions((prevSessions) => [...prevSessions, newSession]);

    // Update daily stats
    const today = now.toISOString().split('T')[0];
    setDailyStats((prevStats) => {
      const todayStats = prevStats.find((stat) => stat.date === today);
      if (todayStats) {
        return prevStats.map((stat) => (stat.date === today ? { ...stat, totalTime: stat.totalTime + session.duration } : stat));
      } else {
        return [...prevStats, { date: today, totalTime: session.duration }];
      }
    });

    updateStreak();
  };

  const updateStreak = () => {
    const today = new Date().toISOString().split('T')[0];
    if (today !== lastStreakUpdate) {
      const yesterday = new Date(new Date().setDate(new Date().getDate() - 1)).toISOString().split('T')[0];

      if (lastStreakUpdate === yesterday) {
        setCurrentStreak((prevStreak) => prevStreak + 1);
      } else if (lastStreakUpdate !== today) {
        setCurrentStreak(1);
      }

      setLastStreakUpdate(today);
    }
  };

  const removeSession = (id: string): void => {
    setSessions((prevSessions) => prevSessions.filter((session) => session.id !== id));
    // Note: We should also update dailyStats here, but for simplicity, we'll skip that for now
  };

  return { sessions, dailyStats, currentStreak, addSession, removeSession, updateStreak };
};

export default useProductivityData;

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/App.tsx
================
import React, { useState, useEffect } from 'react';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Timer from './components/Timer';
import TaskInput from './components/TaskInput';
import Analytics from './components/Analytics';
import Settings from './components/Settings';
import useProductivityData from './hooks/useProductivityData';

const App: React.FC = () => {
  const [currentTask, setCurrentTask] = useState<{ task: string; category: string } | null>(null);
  const { sessions, dailyStats, addSession, currentStreak, updateStreak } = useProductivityData();
  const [showSettings, setShowSettings] = useState(false);
  const [pomodoroTime, setPomodoroTime] = useState(() => {
    const saved = localStorage.getItem('pomodoroTime');
    return saved ? parseInt(saved, 10) : 1500; // 25 minutes default
  });
  const [breakTime, setBreakTime] = useState(() => {
    const saved = localStorage.getItem('breakTime');
    return saved ? parseInt(saved, 10) : 300; // 5 minutes default
  });

  useEffect(() => {
    localStorage.setItem('pomodoroTime', pomodoroTime.toString());
    localStorage.setItem('breakTime', breakTime.toString());
  }, [pomodoroTime, breakTime]);

  const handleTaskStart = (task: string, category: string) => {
    setCurrentTask({ task, category });
    updateStreak(); // Update streak when a new task is started
  };

  const handleTimerComplete = (duration: number) => {
    if (currentTask) {
      addSession({
        task: currentTask.task,
        category: currentTask.category,
        duration,
      });
    }
  };

  const handleSettingsSave = (newPomodoroTime: number, newBreakTime: number) => {
    setPomodoroTime(newPomodoroTime);
    setBreakTime(newBreakTime);
    setShowSettings(false);
  };

  return (
    <div className='min-h-screen bg-gray-100 py-8'>
      <div className='max-w-3xl mx-auto bg-white p-8 rounded-lg shadow-md'>
        <div className='flex justify-between items-center mb-6'>
          <h1 className='text-3xl font-bold'>Pomodoro Timer</h1>
          <button onClick={() => setShowSettings(!showSettings)} className='bg-gray-200 hover:bg-gray-300 rounded-full p-2'>
            ⚙️
          </button>
        </div>
        {showSettings ? (
          <Settings pomodoroTime={pomodoroTime} breakTime={breakTime} onSave={handleSettingsSave} />
        ) : (
          <>
            <TaskInput onTaskStart={handleTaskStart} />
            {currentTask && (
              <div className='mb-4 text-center'>
                <p className='font-semibold'>Current Task: {currentTask.task}</p>
                <p className='text-gray-600'>Category: {currentTask.category}</p>
              </div>
            )}
            <Timer pomodoroTime={pomodoroTime} breakTime={breakTime} onComplete={handleTimerComplete} />
            <Analytics sessions={sessions} dailyStats={dailyStats} currentStreak={currentStreak} />
          </>
        )}
        <ToastContainer limit={1} />
      </div>
    </div>
  );
};

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "pomodoro",
  "version": "0.1.0",
  "private": true,
  "main": "build/electron/main.js",
  "homepage": "./",
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "electron-is-dev": "^2.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "react-toastify": "^9.1.3",
    "recharts": "^2.8.0",
    "web-vitals": "^2.1.4"
  },
  "devDependencies": {
    "@types/electron": "^1.6.10",
    "@types/node": "^20.6.0",
    "@types/react": "^18.2.21",
    "@types/react-dom": "^18.2.7",
    "autoprefixer": "^10.4.15",
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "electron": "^27.0.0",
    "electron-builder": "^24.6.4",
    "postcss": "^8.4.29",
    "tailwindcss": "^3.3.3",
    "typescript": "^4.9.5",
    "wait-on": "^7.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "electron:dev": "concurrently \"cross-env BROWSER=none npm start\" \"wait-on http://localhost:3000 && tsc -p electron && electron .\"",
    "electron:build": "npm run build && tsc -p electron && electron-builder build --mac --arm64",
    "postinstall": "electron-builder install-app-deps"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "build": {
    "appId": "com.andrespaulino.pomodoro-timer",
    "productName": "Pomodoro Timer",
    "files": [
      "build/**/*",
      "node_modules/**/*"
    ],
    "directories": {
      "buildResources": "assets"
    },
    "mac": {
      "category": "public.app-category.productivity",
      "target": [
        "dmg",
        "zip"
      ]
    },
    "win": {
      "target": [
        "nsis",
        "portable"
      ]
    },
    "linux": {
      "target": [
        "AppImage",
        "deb"
      ]
    }
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Pomodoro Timer Desktop Application

A customizable Pomodoro Timer application built with Electron, React, and TypeScript. This app helps you manage your time effectively using the Pomodoro Technique, complete with productivity analytics and streak tracking.

## Features

- 🍅 Customizable Pomodoro and break durations
- 📊 Productivity analytics with daily, weekly, and monthly views
- 🔥 Streak tracking to motivate consistent usage
- 📝 Task input and categorization
- 💾 Offline functionality with local data storage
- 🖥️ Cross-platform desktop application (Windows, macOS, Linux)

## Getting Started

### Prerequisites

- Node.js (v14.0.0 or later)
- npm (v6.0.0 or later)

### Installation

1. Clone the repository:
   ```
   git clone https://github.com/andrespaulino/pomodoro-timer.git
   cd pomodoro-timer
   ```

2. Install dependencies:
   ```
   npm install
   ```

3. Start the development server:
   ```
   npm run electron:dev
   ```

### Building the Application

To build the application for your current platform:

```
npm run electron:build
```

The built application will be available in the `dist` folder.

## Usage

1. Start the application
2. Set your desired Pomodoro and break durations in the Settings
3. Enter a task and select a category
4. Start the Pomodoro timer
5. Work until the timer ends, then take a break
6. Repeat and watch your productivity grow!

## Technologies Used

- Electron
- React
- TypeScript
- TailwindCSS
- Recharts (for analytics visualization)

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

================
File: tailwind.config.js
================
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.electron.json
================
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "sourceMap": true,
    "strict": true,
    "outDir": "./build/electron",
    "rootDir": "./src/electron",
    "noEmitOnError": true,
    "typeRoots": ["node_modules/@types"]
  },
  "include": ["src/electron/**/*"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src", "electron"]
}
